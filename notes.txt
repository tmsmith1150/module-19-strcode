Your task is to build a text editor that runs in the browser. The app will be a single-page application that meets the PWA criteria. Additionally, it will feature a number of data persistence techniques that serve as redundancies in case one of the options is not supported by the browser. The application will also function offline.

To build this text editor, you will start with an existing application and implement methods for getting and storing data to an IndexedDB database. You will use a package called idb, which is a lightweight wrapper around the IndexedDB API. It features a number of methods that are useful for storing and retrieving data, and is used by companies like Google and Mozilla.

You will deploy this full-stack application to Heroku

Make sure to clone the starter code repository 

webpack works to improve the user experience by making the app faster behind the scenes by bundling only the assets we need.

Create React App (CRA), which weâ€™ll use in the next module, is a popular tool that allows developers to quickly bootstrap a React app. Under the hood, CRA is actually combining the React front-end library with a preconfigured version of webpack to help improve performance. Most of the time, using the preconfigured webpack in React is enough to get your app up and running quickly. But by learning and using the fundamentals of webpack in this lesson, you will be ready not just to use CRA out of the box next week but to add your own, advanced webpack configurations to your application's setup!
Webpack also requires an entry point. To bundle files, webpack looks at this entry pointâ€”usually the index.js fileâ€”and maps out all the dependencies imported into the entry point file. To be included in the build, modules should be imported into the entry point.

The entry point file and all the dependencies are then compiled into one long output file, or bundle. This bundle appears in a new directory generated by webpack called a dist directory.



run `npm start`
npm init
npm install
Install Concurrently at the root level of your application by using npm i concurrently
    - Add this to root package.json
      "start:dev": "concurrently \"cd server && npm run server\" \"cd client && npm run dev\"",
      "start": "cd server && node server.js",
      "server": "cd server nodemon server.js --ignore client",
      "build": "cd client && npm run build",
      "client": "cd client && npm start"


****WEBPACK INSTALLATION****
It is done when a webpack.config.js file appears at the root of the client directory.
It is done when the script npm run build can be used to run a local copy of webpack via the command line
Install "webpack' and 'webpack-cli' in client directory.
In webpack.config.js  - Add and configure workbox plugins for a service worker and manifest file.
                      - Add CSS loaders and babel to webpack.
                      - Add the following to plugins
                      plugins: [
            // Webpack plugin that generates our html file and injects our bundles.
            new HtmlWebpackPlugin({
                template: './index.html',
                title: 'PWA Editor',
            }),

            // Injects our custom service worker
            new InjectManifest({
                swSrc: './src-sw.js',
                swDest: 'src-sw.js',
            }),

            // Creates a manifest.json file.
            new WebpackPwaManifest({
                fingerprints: false,
                inject: true,
                name: 'Just Another Text Editor',
                short_name: 'J.A.T.E',
                description: 'Takes notes with JavaScript syntax highlighting!',
                background_color: '#225ca3',
                theme_color: '#225ca3',
                id: '/',
                start_url: '/',
                publicPath: '/',
                icons: [
                    {
                        src: path.resolve('src/images/logo.png'),
                        sizes: [96, 128, 192, 256, 384, 512],
                        destination: path.join('assets', 'icons'),
                    },
                ],
            }),
        ],

        - Add this to modulesmodule: {
            // CSS loaders
            rules: [
                {
                    test: /\.css$/i,
                    use: ['style-loader', 'css-loader'],
                },
                {
                    test: /\.m?js$/,
                    exclude: /node_modules/,
                    // We use babel-loader in order to use ES6.
                    use: {
                        loader: 'babel-loader',
                        options: {
                            presets: ['@babel/preset-env'],
                            plugins: [
                                '@babel/plugin-proposal-object-rest-spread',
                                '@babel/transform-runtime',
                            ],
                        },
                    },
                },
            ],
        },

 navigate to the command line in the client directory and run npm install and npm run build you should now see a dist folder is created in the client directory.
 In the dist folder open the html in live server to see the app
 should be going to IndexedDB and localStaorage





 ****INDEXEDDB INSTALLATION****
 Navigate into the client folder of the project and import the idb npm module by using npm install idb
 In client/src/js/database.js  - Add the following to export const putDB = async (content) =>
                                export const putDb = async (content) => {
                                    console.error('PUT to database');
                                    const jateDb = await openDB('jate', 1);
                                    const tx = jateDb.transaction('jate', 'readwrite');
                                    const store = tx.objectStore('jate');
                                  
                                    // Use the .put method to update the data in the database
                                    const request = store.put({ id: 1, value: content });
                                  
                                    const result = await request;
                                    console.log('ðŸš€ - data saved to the database', result);
                                  };

                                - Add the following to export const getDb = async () =>
                                export const getDb = async () => {
                                     console.log('GET from the database');
                                 
                                     // Create a connection to the database and version we want to use
                                     const jateDb = await openDB('jate', 1);
                                 
                                     // Create a new transaction and specify the database and data privileges
                                     const tx = jateDb.transaction('jate', 'readonly');
                                 
                                     // Open up the desired object store
                                     const store = tx.objectStore('jate');
                                 
                                     // Use the .getall() method to get all data in the database
                                     const request = store.getAll();
                                 
                                     // Get confirmation of the request
                                     const result = await request;
                                     result
                                         ? console.log('Data retrieved from database')
                                         : console.log('Data not found in the database.');
                                     return result?.value;
                                 };



In the root package.jason change the start script to below
        "start": "npm run build && cd server && node server.js",
        run npm start and navigate to localhost:3000
        open inspect application and verify table exists in IndexedDB



***GENERATING A SERVICE WORKER WITH WORKBOX*****

In the client directory
    npm install workbox-webpack-plugin --save-dev

    

In client/src-sw.js  - Add the following code
                    registerRoute(
                            // Here we define the callback function that will filter the requests we want to cache (in this case, JS and                         CSS files)
                            ({ request }) =>
                                ['style', 'script', 'worker'].includes(request.destination),
                            new StaleWhileRevalidate({
                                // Name of the cache storage.
                                cacheName: 'asset-cache',
                                plugins: [
                                    // This plugin will cache responses with these headers to a maximum-age of 30 days
                                    new CacheableResponsePlugin({
                                        statuses: [0, 200],
                                    }),
                                ],
                            })
                        );


Run npm install and npm run build in the client directory.
Inspect the generated service worker file in the build directory.


git init
create repo
git remote add origin git@github.com:tmsmith1150/module-19-strcode.git







 